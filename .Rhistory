gdp<-gdp[,c(1,2,4,5)]
colnames(gdp)<-c("CountryCode","Rank","Country","GDP")
gdp$GDP<-gsub(" ","", gdp$GDP , fixed=TRUE)
gdp$GDP<-gsub(",","", gdp$GDP , fixed=TRUE)
gdp
gdp$GDP<-gsub(",","", gdp$GDP , fixed=TRUE)
class(gdp$GDP)<-"numeric"
mean(gdp$GDP)
gdp<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
skip=4, strip.white=TRUE,
blank.lines.skip=TRUE, nrows=190)
gdp<-gdp[,c(1,2,4,5)]
colnames(gdp)<-c("CountryCode","Rank","CountryName","GDP")
gdp$GDP<-gsub(" ","", gdp$GDP , fixed=TRUE)
gdp$GDP<-gsub(",","", gdp$GDP , fixed=TRUE)
class(gdp$GDP)<-"numeric"
mean(gdp$GDP)
grep("^United",countryNames)
grep("^United",countryName)
grep("^United",CountryName)
grep("^United",gdp$CountryName)
grep("^United",gdp$CountryName,value=TRE)
grep("^United",gdp$CountryName,value=TRUE)
gdp<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
skip=4, strip.white=TRUE,
blank.lines.skip=TRUE, nrows=190)
View(gdp)
gdp<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
strip.white=TRUE,
blank.lines.skip=TRUE, nrows=190)
View(gdp)
ed<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv ",
strip.white=TRUE,
blank.lines.skip=TRUE, nrows=190)
View(ed)
ggdp<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
skip=4, strip.white=TRUE,
blank.lines.skip=TRUE, nrows=190)
gdp<-gdp[,c(1,2,4,5)]
colnames(gdp)<-c("CountryCode","Rank","CountryName","GDP")
ed$Special.Notes<-gsub("Fiscal year end: ","", ed$Special.Notes , fixed=TRUE)
View(ed)
x=ed[ed$Special.Notes="^June"]
x=ed[ed$Special.Notes=-"^June",]
x=ed[ed$Special.Notes=="^June",]
View(x)
x=ed[ed$Special.Notes ^"June",]
x<-grep("^June",ed$Special.Notes, value=TRUE)
x
x<-grep("^June",ed$Special.Note)
x
x<-grep("^june",ed$Special.Note)
x<-ed[1,grep("^June",ed$Special.Note)]
x<-ed[grep("^June",ed$Special.Note),1]
x
x<-as.vector(ed[grep("^June",ed$Special.Note),1])
x
y<-gdp[gdp$CountrCodr%in%x,]
View(y)
View(y)
ed<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv ",
strip.white=TRUE,
blank.lines.skip=TRUE)
ed$Special.Notes<-gsub("Fiscal year end: ","", ed$Special.Notes , fixed=TRUE)
x<-as.vector(ed[grep("^June",ed$Special.Note),1])
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
samples2012<-grep("^2012",sampleTimes)
sampleDays<-wday(samples2012)
sampleDays
samples2012<-ymd(samples2012)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
samples2012<-grep("^2012",sampleTimes)
samples2012
sampleTimes
samples2012<-grep("^2012",sampleTimes,value=TRUE)
samples2012
samples2012<-ymd(samples2012)
samples2012
sampleDays<-wday(samples2012, label=TRUE)
sampleDays
samples2012
grep("Monday",sampleDays,value=TRUE)
sampleDays
grep("Mon",sampleDays,value=TRUE)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label=TRUe)
wday(this_day, label=TRUE)
thismoment<-now()
this_moment<-now()
this_moment
minute(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hms(now()))
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc<-now(tzone = "America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours="17", minutes="34")
depart<-update(depart,hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long(last_time, arrive)
how_long<-new_inteval(last_time, arrive)
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
data <- read.table("./Course4/Proj1/household_power_consumption.txt", na.strings = "?", sep = ";", header = TRUE)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
data$Time <- strptime(data$Time, format = "%H:%M:%S")
subset <- subset(data, data$Date >= "2007-02-01" & data$Date <= "2007-02-02")
##png(filename = "plot1.png")
hist(subset$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", col = "red")
##dev.off()
?plot
library(ggplot)
library(ggplot2)
qplot(disp, hwy, data=mpg, color, drv)
qplot(disp, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv)
?xyplot
library(Lattice)
library(lattice)
?xyplot
library(datasets)
d<-xyplot(Ozone ~ Wind, data=airqualitty)
d<-xyplot(Ozone ~ Wind, data=airquality)
d
str(d)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet,)
BodyWeight
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?splom
par()
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
with the library() function, I can run qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
rep(1:3, each = 4)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dataframe
dataFrame
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
distxy
hClustering
str(hClustering)
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
View(dataFrame)
kmeansObj
colors()
colors(1)
load("./Course4/SamsungCaseStudy/samsungData.rda")
View(samsungData)
names(samsungData)
names(samsungData)[1:12]
table(samsungData$activity)
str(samsungData)
str(samsungData$activity)
samsungData <- transform(samsungData, activity = factor(activity))
str(samsungData$activity)
str(samsungData$subject)
table(samsungData$subject)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity),
pch = 1)
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity),
pch = 1)
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity),
pch = 1)
source("myplclust.R")
NEI <- readRDS("summarySCC_PM25.rds")
s = tapply(NEI$Emissions,NEI$year,sum)
png("plot1.png",width = 480, height = 480)
plot(rownames(s),s,xlab='year',ylab='total PM2.5 Emmissions(tons)',main='Total PM2.5 Emmissions from 1999 to 2008')
dev.off()
##Load ggplot library
library(ggplot2)
## Create a sub-directory for the work (if necessary) and switch WD
mainDir <- "C:/Users/ssharaf/Documents/RWD"
setwd(mainDir)
subDir <- "Course4"
if (file.exists(subDir)){
setwd(file.path(mainDir, subDir))
} else {
dir.create(file.path(mainDir, subDir))
setwd(file.path(mainDir, subDir))
}
subDir <- "Proj2"
if (file.exists(subDir)){
setwd(file.path(getwd(), subDir))
} else {
dir.create(file.path(getwd(), subDir))
setwd(file.path(getwd(), subDir))
}
## Download zip file if not downloaded already
zip.file <- "exdata_data_NEI_data.zip"
if (!file.exists(zip.file)){
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(url, zip.file)
}
## Extracts files from zip and read
file.name <- "Source_Classification_Code.rds"
if (!file.exists(file.name)){
unzip(zip.file)
}
SCC <- readRDS(file.name)
file.name <- "summarySCC_PM25.rds"
if (!file.exists(file.name)){
unzip(zip.file)
}
NEI <- readRDS(file.name)
NEI <- readRDS("summarySCC_PM25.rds")
s = tapply(NEI$Emissions,NEI$year,sum)
png("plot1.png",width = 480, height = 480)
plot(rownames(s),s,xlab='year',ylab='total PM2.5 Emmissions(tons)',main='Total PM2.5 Emmissions from 1999 to 2008')
dev.off()
## Create a sub-directory for the work (if necessary) and switch WD
mainDir <- "C:/Users/ssharaf/Documents/RWD"
setwd(mainDir)
subDir <- "Course4"
if (file.exists(subDir)){
setwd(file.path(mainDir, subDir))
} else {
dir.create(file.path(mainDir, subDir))
setwd(file.path(mainDir, subDir))
}
subDir <- "Proj2"
if (file.exists(subDir)){
setwd(file.path(getwd(), subDir))
} else {
dir.create(file.path(getwd(), subDir))
setwd(file.path(getwd(), subDir))
}
## Download zip file if not downloaded already
zip.file <- "exdata_data_NEI_data.zip"
if (!file.exists(zip.file)){
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(url, zip.file)
}
## Extracts Summary PM2.5 file from zip and read
file.name <- "summarySCC_PM25.rds"
if (!file.exists(file.name)){
unzip(zip.file)
}
NEI <- readRDS(file.name)
##Build a data frame with total PM2.5 by year
Total.PM<-as.matrix(tapply(NEI$Emissions,NEI$year,sum),rownames=NULL)
Total.PM <- data.frame(as.numeric(rownames(Total.PM)), Total.PM[,1])
colnames(Total.PM)<- c("Year","TotalPM")
## Create plot and send to the PNG device
png(filename = "plot1.png", width = 480, height = 480, units = "px")
with(Total.PM, plot(Year,TotalPM,xlab="Year",ylab="Total PM2.5",pch=20))
abline(lm(TotalPM ~ Year, Total.PM), lwd=2)
dev.off()
## Create a sub-directory for the work (if necessary) and switch WD
mainDir <- "C:/Users/ssharaf/Documents/RWD"
setwd(mainDir)
subDir <- "Course4"
if (file.exists(subDir)){
setwd(file.path(mainDir, subDir))
} else {
dir.create(file.path(mainDir, subDir))
setwd(file.path(mainDir, subDir))
}
subDir <- "Proj2"
if (file.exists(subDir)){
setwd(file.path(getwd(), subDir))
} else {
dir.create(file.path(getwd(), subDir))
setwd(file.path(getwd(), subDir))
}
## Download zip file if not downloaded already
zip.file <- "exdata_data_NEI_data.zip"
if (!file.exists(zip.file)){
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(url, zip.file)
}
## Extracts Summary PM2.5 file from zip and read
file.name <- "summarySCC_PM25.rds"
if (!file.exists(file.name)){
unzip(zip.file)
}
NEI <- readRDS(file.name)
##Build a data frame with total PM2.5 by year
Total.PM<-as.matrix(tapply(NEI$Emissions,NEI$year,sum),rownames=NULL)
Total.PM <- data.frame(as.numeric(rownames(Total.PM)), Total.PM[,1])
colnames(Total.PM)<- c("Year","TotalPM")
## Create plot and send to the PNG device
png(filename = "plot1.png", width = 480, height = 480, units = "px")
with(Total.PM, plot(Year,TotalPM,xlab="Year",ylab="Total PM2.5",pch=20))
abline(lm(TotalPM ~ Year, Total.PM), lwd=2)
dev.off()
file.dir <- "C:/Users/ssharaf/Documents/RWD/Course5/Assignment1"
setwd(file.dir)
zip.file <- "repdata_data_activity.zip"
file.name <- "activity.csv"
if (!file.exists(file.name)){
unzip(zip.file)
}
data <- read.csv(file.name)
file.dir <- "C:/Users/ssharaf/Documents/RWD/Course5/Assignment1"
setwd(file.dir)
zip.file <- "repdata_data_activity.zip"
file.name <- "activity.csv"
if (!file.exists(file.name)){
unzip(zip.file)
}
data <- read.csv(file.name)
View(data)
install.packages("ggplot2")
daily.steps <- tapply(data$steps, data$date, sum)
hist(daily.steps, main = "Histogram of Daily Steps")
hist(data1$Global_active_power, main="Global Active Power",
c
fdfd
Note that NA missing) values are ignored.
interval.averages <- tapply(data$steps, data$interval, mean)
plot
interval.averages
interval.averages <- tapply(data$steps, data$interval, mean, na.rm)
interval.averages <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
interval.averages
interval.averages <- as.data.frame(tapply(data$steps, data$interval, mean, na.rm=TRUE))
View(interval.averages)
interval.averages <- as.data.frame(tapply(data$steps, data$interval, mean,
na.rm=TRUE))
colnames(interval.averages) <- c("Interval", "Steps")
str(interval.averages)
plot(row.names(interval.averages),interval.averages[,1])
plot(row.names(interval.averages),interval.averages[,1], type="l")
max(interval.averages)
which.max(interval.averages[,1])
interval.avergaes[,which.max(interval.averages[,1])]
interval.averages[,which.max(interval.averages[,1])]
interval.averages[,835]
interval.averages[which.max(interval.averages[,1]),]
interval.averages[835,]
interval.averages[104,]
interval.averages[which.max(interval.averages[,1]),]
It then reports the interval with the maximum average and that average.
fd
is.na(data$steps)
sum(is.na(data$steps))
daily.steps.mean <- mean(daily.steps)
daily.steps <- tapply(data$steps, data$date, sum)
hist(daily.steps, main = "Histogram of Daily Steps", xlab = "Total Steps")
daily.steps.mean <- mean(daily.steps)
daily.steps.median <- median(daily.steps)
mean(daily.steps)
row.names(interval.averages.maximum[1,])
interval.averages.maximum <- interval.averages[which.max(interval.averages[,1]),]
row.names(interval.averages.maximum[1,])
row.names(interval.averages.maximum)
row.names(interval.averages.maximum[1])
x<-row.names(interval.averages.maximum[1])
x
str(interval.averages.maximum)
names(interval.averages.maximum[1])
complete.cases(data)
sum(is.na(data$steps))
sum(complete.cases(data))
interval.averages[920]
interval.averages[920,]
interval.averages[113,]
interval.averages$920
str(interval.averages)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
na.rm=TRUE))
str(interval.averages)
colnames(interval.averages) <- "Steps"
View(interval.averages)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
simplify = TRUE, na.rm=TRUE))
View(interval.averages)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
simplify = TRUE, na.rm=TRUE),
rownames=NULL)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
simplify = TRUE, na.rm=TRUE),
row.names=NULL)
View(interval.averages)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
na.rm=TRUE),
row.names=NULL)
View(interval.averages)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
na.rm=TRUE),
row.names=data$interval)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
simplify = TRUE, na.rm=TRUE)
)
View(interval.averages)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
simplify = TRUE, na.rm=TRUE)
)
unique(data$interval)
colnames(interval.averages) <- "Steps"
interval.averages <- cbind(unique(data$interval), interval.averages)
View(interval.averages)
interval.averages <- data.frame(tapply(data$steps, data$interval, mean,
simplify = TRUE, na.rm=TRUE),
row.names=NULL)
interval.averages <- cbind(unique(data$interval), interval.averages)
View(interval.averages)
colnames(interval.averages) <- c("Interval", "Steps")
plot(interval.averages$Interval,interval.averages$Steps, type="l",
main = "Daily Average Steps for Each Interval", xlab = "Interval",
ylab = "Average Steps")
interval.averages <- cbind(unique(data$interval),
data.frame(tapply(data$steps, data$interval, mean,
simplify = TRUE, na.rm=TRUE),
row.names=NULL))
View(interval.averages)
interval.averages.maximum
interval.averages.maximum.row
names(interval.averages.maximum[1])
interval.averages.maximum[1]
str(interval.averages.maximum)
interval.averages.maximum.row <- names(interval.averages.maximum[1])
interval.averages.maximum[1]
interval.averages.maximum
interval.averages.maximum.name
interval.averages.maximum$name
row.name(interval.averages.maximum)
row.names(interval.averages.maximum)
##max(interval.averages)
interval.averages.maximum <- as.matrix(interval.averages[which.max(interval.averages$Steps),])
interval.averages.maximum
(interval.averages[which.max(interval.averages$Steps),])
